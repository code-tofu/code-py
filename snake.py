# Code by YoutubeEngineerMan
# https://github.com/engineer-man/youtube/tree/master/015 https://www.youtube.com/watch?v=rbasThWVb-c 

import random
import curses
# The curses package is part of the Python standard library and is useful for creating text-based user interfaces and generally controlling the screen and keyboard input
# https://docs.python.org/3/howto/curses.html https://docs.python.org/3/library/curses.html

s = curses.initscr()
# initscr() returns a window object representing the entire screen

curses.curs_set(0)
sh, sw = s.getmaxyx()
# window.getmaxyx() Return a tuple (y, x) of the height and width of the window.
w = curses.newwin(sh, sw, 0, 0)
# newwin() function creates a new window of a given size, returning the new window object.
w.keypad(1)
# window.keypad(flag): If flag is True, escape sequences generated by some keys (keypad, function keys) will be interpreted by curses. 
# If flag is False, escape sequences will be left as is in the input stream.
w.timeout(100)
# window.timeout(delay) Set blocking or non-blocking read behavior for the window. 

snk_x = sw/4
snk_y = sh/2
snake = [
    [snk_y, snk_x],
    [snk_y, snk_x-1],
    [snk_y, snk_x-2]
]

food = [sh/2, sw/2]
# food spawn in middle of screen
w.addch(int(food[0]), int(food[1]), curses.ACS_PI)
# window.addch Paint character ch at (y, x) with attributes attr, overwriting any character previously painted at that location.

key = curses.KEY_RIGHT
# intial movement of snake

while True:
    next_key = w.getch()
    # window.getch Get a character
    key = key if next_key == -1 else next_key

    if snake[0][0] in [0, sh] or snake[0][1]  in [0, sw] or snake[0] in snake[1:]:
    # y position at top OR height OR x position at left OR width of screen OR snake in  itself
        curses.endwin()
        # curses.endwin() De-initialize the library, and return terminal to normal status.
        quit()

    new_head = [snake[0][0], snake[0][1]]
    #new head = snky, snkx

    if key == curses.KEY_DOWN:
        new_head[0] += 1 #change skny by 1
    if key == curses.KEY_UP:
        new_head[0] -= 1
    if key == curses.KEY_LEFT:
        new_head[1] -= 1 #change skny by 1
    if key == curses.KEY_RIGHT:
        new_head[1] += 1

    snake.insert(0, new_head)
    #insert into list snake new head at position 0  

    if snake[0] == food: #headofsnake
        food = None
        while food is None:
            nf = [
                random.randint(1, sh-1),
                random.randint(1, sw-1)
            ]
            food = nf if nf not in snake else None #check if food is in snake, if true redo loop
        w.addch(food[0], food[1], curses.ACS_PI) #create food at new location nf
    else:
        tail = snake.pop()
        w.addch(int(tail[0]), int(tail[1]), ' ') #
        # pop() method removes the item at the given index
        # add space where tail piece is

    w.addch(int(snake[0][0]), int(snake[0][1]), curses.ACS_CKBOARD)
    #add head of snake to screen
